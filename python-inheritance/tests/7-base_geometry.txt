Module 7-base_geometry

def integer_validator(self, name, value) validates value
Importing:

	>>> integer_validator = __import__('7-base_geometry').BaseGeometry.integer_validator
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Usage:

	>>> bg = BaseGeometry()
	>>> bg.integer_validator("name", 2)
	>>> print(type(bg))
	<class '7-base_geometry.BaseGeometry'>

Does not work if value is equal or less than 0:

	>>> bg = BaseGeometry()
	>>> bg.integer_validator("name", 0)
	Traceback (most recent call last):
	ValueError: name must be greater than 0

Error cases:

	>>> bg = BaseGeometry()
	>>> bg.integer_validator("name", "hi")
	Traceback (most recent call last):
	TypeError: name must be an integer

	>>> bg = BaseGeometry()
	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

	>>> bg = BaseGeometry()
        >>> bg.integer_validator("name", None)
        Traceback (most recent call last):
	TypeError: name must be an integer

	>>> bg = BaseGeometry()
        >>> bg.integer_validator("name", 72.5)
        Traceback (most recent call last):
        TypeError: name must be an integer
